from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination
import matplotlib.pyplot as plt
import networkx as nx

# Definim structura modelului Bayesian
model = BayesianNetwork([('S', 'O'), ('S', 'L'), ('S', 'M'), ('L', 'M')])

# Definim CPD-urile (probab conditionate)

# P(S)
cpd_s = TabularCPD(variable='S', variable_card=2, values=[[0.6], [0.4]])

# P(O | S)
cpd_o = TabularCPD(variable='O', variable_card=2, values=[[0.9, 0.3], [0.1, 0.7]], 
                   evidence=['S'], evidence_card=[2])

# P(L | S)
cpd_l = TabularCPD(variable='L', variable_card=2, values=[[0.7, 0.2], [0.3, 0.8]], 
                   evidence=['S'], evidence_card=[2])

# P(M | S, L)
cpd_m = TabularCPD(variable='M', variable_card=2, 
                   values=[[0.8, 0.5, 0.4, 0.1], [0.2, 0.5, 0.6, 0.9]], 
                   evidence=['S', 'L'], evidence_card=[2, 2])

# Asociem CPD-urile cu modelul
model.add_cpds(cpd_s, cpd_o, cpd_l, cpd_m)

# Verificam modelul pentru corectitudine
assert model.check_model()

# Facem inferenta exacta folosind Variable Elimination
inference = VariableElimination(model)

# P(S | O=1, L=1, M=1) - calculam probabilitatea ca email-ul sa fie spam
result = inference.query(variables=['S'], evidence={'O': 1, 'L': 1, 'M': 1})
print("Probabilitatea ca e-mail-ul sÄƒ fie spam (S=1 | O=1, L=1, M=1):")
print(result)

# Afisam reteaua Bayesiana
pos = nx.circular_layout(model)
nx.draw(model, pos=pos, with_labels=True, node_size=4000, font_weight='bold', node_color='skyblue')
plt.show()
